from contest_import import Contest
from database import DataBase
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes, MessageHandler
import time
import threading
import random
from sheets import load_to_sheets
import json
import logging

threads = []

def sliced(arr=[], cols=1):
    i = 0
    n = len(arr)
    res = []
    while (i < n):
        res.append(arr[i:i+cols])
        i += cols
    return res 

settings = {}

try:
    with open("settings.json", "r", encoding='utf-8') as file:
        settings = json.loads(file.read())
        print(settings)
except Exception as e:
    print(e, "–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

# logging.basicConfig(filename='bot.log', level=logging.INFO)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
handler = logging.FileHandler('bot.log', 'w', 'utf-8')
handler.setFormatter("%(asctime)s;%(levelname)s;%(message)s",
                              "%Y-%m-%d %H:%M:%S")
logger.addHandler(handler)

logger.info(f'–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î c –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {settings}')
db = DataBase(settings["REGISTRATED_TEAMS_FILE"], settings["TEAM_TOKENS_FILE"], settings["CONTEST_ID"])
db.update()
db.save()
db.save_table_to_csv()
load_to_sheets(csv_data="table_budget.csv")
logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∑–∞–∫–æ–Ω—á–µ–Ω–∞')

async def identify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∫–æ–º–∞–Ω–¥—ã:"
    tg_id = context._user_id
    db.add_in_reg_queue(tg_id)
    logger.info(f'–†–µ–≥–∞–µ—Ç—Å—è {tg_id}')
    await update.message.reply_text(text)
    
        
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = \
'''*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ª—É—á—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —ç—Ç–æ–≥–æ –ª–µ—Ç–∞!*
–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏:

*–†—É–ª–µ—Ç–∫–∞:*
–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ 10 –±–∞–ª–ª–æ–≤, –≤–∞–º –º–æ–∂–µ—Ç –≤—ã–ø–∞—Å—Ç—å –∫–∞–∫ –±–æ–ª—å—à–µ, —Ç–∞–∫ –∏ –º–µ–Ω—å—à–µ. 
        
*–°—Ç–∞–≤–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É:*
–í—ã —Å—Ç–∞–≤–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∑–∞–¥–∞—á, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –µ—â–µ –Ω–µ –±—ã–ª–æ –ø–æ–ø—ã—Ç–æ–∫. –ï—Å–ª–∏ –≤—ã –µ–µ —Å–¥–∞–µ—Ç–µ —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–≤–æ–∏ –±–∞–ª–ª—ã –Ω–∞–∑–∞–¥ –≤ —É–¥–≤–æ–µ–Ω–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ. 

*–ò–≥—Ä–∞ –≤ —Ç—Ä–∏ –Ω–∞–ø–µ—Ä—Å—Ç–∫–∞:*
–ú—ã –∑–∞–≥–∞–¥—ã–≤–∞–µ–º –∫–ª–∞–¥–µ–º –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–¥ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫. –ï—Å–ª–∏ –≤—ã —É–≥–∞–¥—ã–≤–∞–µ—Ç–µ, –ø–æ–¥ –∫–∞–∫—É—é, –≤—ã –µ–≥–æ –ø–æ–ª—É—á–∞–µ—Ç–µ. –ü–æ–ø—ã—Ç–∫–∞ —Ç–∞–∫ –∂–µ —Å—Ç–æ–∏—Ç 10 –±–∞–ª–ª–æ–≤. 

_–í –ª—é–±–æ–π –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–∏—à–∏—Ç–µ /menu ))_'''
    await update.message.reply_text(text, parse_mode="Markdown")  

async def random_msg(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    tg_id = context._user_id
    msg = update.message.text
    text = ""

    if (db.in_registration_queue(tg_id)):
        if db.registrate(tg_id, msg):
            text = f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã: {db.team_of(tg_id)}!!!\n"
            logger.info(f'{tg_id} –∑–∞—Ä–µ–≥–∞–ª–∞—Å—è –≤ —Ç–∏–º—É {db.team_of(tg_id)}')
        else:
            text = "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –ø–æ–º–æ—â–∏ –±–æ–ª–µ–µ —Ç—Ä–µ–∑–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∏—â–∞."
        await update.message.reply_text(text) 
        return None

    chosen_task = db.task_chosen_for_bet(tg_id)

    if (chosen_task != None):
        if not str.isdecimal(msg):
            await update.message.reply_text("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
            return None
        bet = int(msg)
        team = db.team_of(tg_id)
        if db.team_obj_by_name(team).make_bet(bet, chosen_task):
            db.bet_has_been_approved(tg_id)

            logger.info(f"{db.team_of(tg_id)} –ø–æ—Å—Ç–∞–≤–∏–ª–∞ {bet} –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {chosen_task}")

            await update.message.reply_text(f"–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–∏–ª–∞ {bet} –±–∞–ª–ª–æ–≤ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {chosen_task} —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞")
        else:
            logger.info(f"–£ {db.team_of(tg_id)} –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –Ω–∞ {bet}, –∑–∞–¥–∞—á–∞ {chosen_task}")
            await update.message.reply_text("–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–æ–ª–æ—Ç–∞.")
        return None        

    text = "–õ—É—á—à–µ –Ω–∞–∂–º–∏ /menu"
    await update.message.reply_text(text) 
    return None

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    tg_id = context._user_id

    if not db.is_registrated_user(tg_id):
        await identify(update, context)
        return None

    keyboard = [
        [
            InlineKeyboardButton("–°—Ç–∞–≤–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É", callback_data="task"),
        ],
        [   
            InlineKeyboardButton("–ö–†–£–¢–ò–¢–¨", callback_data="casino"),
            InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –±–∞–ª–ª—ã", callback_data="money"),
        ],
        [
            InlineKeyboardButton("–ò–≥—Ä–∞–µ–º –≤ –Ω–∞–ø–µ—Ä—Å—Ç–∫–∏.", callback_data="naperstki"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ß—Ç–æ –í–∞–º —É–≥–æ–¥–Ω–æ?", reply_markup=reply_markup)

async def naperstki(tg_id, query):
    team_name = db.team_of(tg_id)
    budget = db.team_obj_by_name(team_name).get_budget()

    if (budget < 10):
        await query.edit_message_text("–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–æ–ª–æ—Ç–∞.")
        return 
    

    logger.info(f'{db.team_obj_by_name(team_name)} –∏–≥—Ä–∞–µ—Ç –≤ –Ω–∞–ø—ë—Ä—Å—Ç–∫–∏')
    db.team_obj_by_name(team_name).add_money(-10)
    keyboard_ = [[InlineKeyboardButton("–¢–´–ö", callback_data="nap="+str(i)) for i in range(3)]]
    reply_markup = InlineKeyboardMarkup(keyboard_)

    await query.edit_message_text("–í–∂—É—Ö-–≤–∂—É—Ö-–≤–∂—É—Ö\n–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∏–≥—Ä–∞!", reply_markup=reply_markup)
    pass 

async def casino(tg_id, query):
    team_name = db.team_of(tg_id)
    budget = db.team_obj_by_name(team_name).get_budget()
    if (budget < 10):
        await query.edit_message_text("–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–æ–ª–æ—Ç–∞.")
        return 
    
    res = int(round(random.random()**1.25 * 20))

    logger.info(f'{db.team_obj_by_name(team_name)} –∏–≥—Ä–∞–µ—Ç –≤ –∫–∞–∑–∏–Ω–æ –≤ –≤—ã–±–∏–≤–∞–µ—Ç {res}')

    db.team_obj_by_name(team_name).add_money(res - 10)
    if (res < 10):
        res = ' ' + str(res)
    else:
        res = str(res)
    await query.edit_message_text(f"–í—ã –≤—ã–±–∏–ª–∏ ||{res}|| –±–∞–ª–ª–æ–≤", parse_mode="MarkdownV2")

async def task(update: Update, context: ContextTypes.DEFAULT_TYPE, query):
    tg_id = context._user_id
    team_name = db.team_of(tg_id)
    team_obj = db.team_obj_by_name(team_name)
    free_tasks = team_obj.get_unsolveed_tasks()

    if (len(free_tasks) == 0):
        await query.edit_message_text("–ü–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º —É–∂–µ –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–ø—ã—Ç–∞–π—Ç–µ —Å—á–∞—Å—Ç—å–µ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ!")
        return None 
    
    keyboard = sliced([InlineKeyboardButton(task, callback_data="task="+task) for task in free_tasks], 4)
    reply_markup = InlineKeyboardMarkup(keyboard, )
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É", reply_markup=reply_markup)
    await query.answer()
    return None


async def money(tg_id):
    team_name = db.team_of(tg_id)
    return f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–∞–ø–æ—Ä—è–∂–µ–Ω–∏–∏ {db.team_obj_by_name(team_name).get_budget()} –±–∞–ª–ª–æ–≤."

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query

    # CallbackQueries need to be answered, even if no notification to the user is needed
    # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery

    tg_id = context._user_id

    await query.answer()
    text = ""

    if (query.data == "casino"):
        await casino(tg_id, query)

    elif (query.data == "task"):
        await task(update, context, query)
    
    elif (query.data == "money"):
        text = await money(tg_id)
        await query.edit_message_text(text=text)
    
    elif (query.data == "naperstki"):
        await naperstki(tg_id, query)

    elif (query.data[:5] == "task="):
        name = query.data[5:]
        text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É {name}. –°–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞ –Ω–µ–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å?"
        db.user_choosed_task(tg_id, name)
        await query.edit_message_text(text)
    
    elif (query.data[:4] == "nap="):
        prize = random.randint(0, 2)
        naperrst = int(query.data[4:])
        res = ['‚ùå', '‚ùå', '‚ùå']
        res[prize] = "üéÅ" 
        res = '  '.join(res) + "\n\n"
        if prize == naperrst:
            money_prize = random.randint(20,30)
            team = db.team_of(tg_id)
            db.team_obj_by_name(team).add_money(money_prize)
            res += f"–ú–¥–∞, —è –ø—Ä–æ–∏–≥—Ä–∞–ª... –î–µ—Ä–∂–∏ {money_prize} –ë–∞–ª–ª–æ–≤." 
            logger.info(f'{db.team_obj_by_name(team)} –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç {money_prize} –≤ –Ω–∞–ø—ë—Ä—Å—Ç–∫–∞—Ö')
        else:
            res += "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ—à—å, —Ç—ã, –∫–æ–Ω–µ—á–Ω–æ, –ª—É—á—à–µ... –ò–¥–∏ –∑–∞–π–º–∏—Å—å —á–µ–º-–Ω–∏–±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –≤–æ–∑–≤–∞—Ä—â–∞–π—Å—è —Å –Ω–æ–≤—ã–º–∏ –±—ã–ª–ª–∞–º–∏."
        await query.edit_message_text(res)



async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Displays info on how to use the bot."""
    await update.message.reply_text("Use /start to test this bot.")


def main() -> None:
    application = Application.builder().token(settings["BOT_TOKEN"]).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(None, random_msg))

    # Run the bot until the user presses Ctrl-C
    update_thread = threading.Thread(target=db.parralel_update_sycle)
    update_thread.start()

    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
